### Introduction

This post will describe steps to set up gadgetron on Ubuntu 16.04. Although by default, gadgetron will be installed to system path (e.g. /usr/local/...), it is often not desired for research and development scenario. Therefore, we will now install gadgetron to user's home folder (~/local). In this way, every user can have his/her own gadgetron installed and multiple users can share one computer.

### Install dependencies

```
sudo apt-get update 
sudo apt-get install --yes wget build-essential emacs python-pip python3-dev python3-pip libhdf5-serial-dev cmake git-core libboost-all-dev libfftw3-dev h5utils jq libzmq-dev hdf5-tools liblapack-dev libxml2-dev libfreetype6-dev pkg-config libxslt-dev libarmadillo-dev libace-dev gcc-multilib  libgtest-dev python-dev liblapack-dev liblapacke-dev libatlas-base-dev libatlas-dev libplplot-dev libdcmtk-dev supervisor

sudo pip install --upgrade pip
sudo pip install setuptools
sudo pip install Cython
sudo pip install numpy 
sudo pip install pyxb psutil lxml pydicom
sudo apt-get install -y python-h5py

sudo pip3 install --upgrade pip
sudo pip3 install -U pip setuptools
sudo pip3 install Cython
sudo apt-get install -y python3-psutil python3-pyxb python3-lxml
sudo pip3 install pydicom
sudo apt-get install -y python3-h5py
sudo apt-get install -y python3-numpy python3-configargparse
sudo apt install --yes python3-scipy

# since cmake has problems to find python3 and boost-python3
sudo ln -s /usr/lib/x86_64-linux-gnu/libboost_python-py35.so /usr/lib/x86_64-linux-gnu/libboost_python3.so

```

### Optional: Install CUDA, cudnn

```
cd ~/software

wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb
mv ./cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb ./cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb
sudo apt-get update
sudo apt-get install -y cuda

wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/patches/2/cuda-repo-ubuntu1604-8-0-local-cublas-performance-update_8.0.61-1_amd64-deb
mv ./cuda-repo-ubuntu1604-8-0-local-cublas-performance-update_8.0.61-1_amd64-deb ./cuda-repo-ubuntu1604-8-0-local-cublas-performance-update_8.0.61-1_amd64.deb
sudo dpkg -i ./cuda-repo-ubuntu1604-8-0-local-cublas-performance-update_8.0.61-1_amd64.deb
sudo apt-get update
sudo apt-get upgrade cuda

sudo dpkg -i ./libcudnn7-dev_7.1.4.18-1+cuda8.0_amd64.deb
sudo apt-get update

```

### Optional: Intel-MKL
```
cd ~/software
wget http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/12725/l_mkl_2018.2.199.tgz
tar -xvf ./l_mkl_2018.2.199.tgz
cd l_mkl_2018.2.199

sudo ./install.sh
```

### Optional: docker
```
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get update

sudo apt-get install docker-ce

sudo groupadd docker
sudo usermod -aG docker $USER

```

### Optional: Install nvidia-docker
```
# If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers
docker volume ls -q -f driver=nvidia-docker | xargs -r -I{} -n1 docker ps -q -a -f volume={} | xargs -r docker rm -f
sudo apt-get purge -y nvidia-docker

# Add the package repositories
curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \
  sudo apt-key add -
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \
  sudo tee /etc/apt/sources.list.d/nvidia-docker.list
sudo apt-get update

# Install nvidia-docker2 and reload the Docker daemon configuration
sudo apt-get install -y nvidia-docker2

```

### Optional: Install tensorflow, pytorch

### A few notes about python3

### Compile and install gadgetron to your local folder

### Set up env variables and run gadgetron

### Final notes